# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes

# ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(vi-mode vscode pyenv asdf)

source $ZSH/oh-my-zsh.sh


source ~/powerlevel10k/powerlevel10k.zsh-theme

# zsh vi-mode
VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
VI_MODE_SET_CURSOR=true


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# bash history
# Avoid duplicates
export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history

# When the shell exits, append to the history file instead of overwriting it
# shopt -s histappend
trap 'history -r' USR1
# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# create shortcut
function shortcut() {
  NAME=$1;
  shift;
  #function to display commands then execute them
  eval "function ${NAME} { echo "\$ $*" ; "$*" ; }";
}

# general aliases/functions
alias ll='ls -alFG'
alias ls='ls -G'
function la() { ls -A $*; }
function l() { ls -CF $*; }

function szp() { source ~/.zshrc ; }

export EDITOR=nvim
export VISUAL=nvim
alias n='nvim'

function e() { $EDITOR $*; }
function ezp() { e ~/.zshrc ~/.zsh_aliases ; }
# function vimInstallPlugins() { vim +PlugInstal +qall; }

# osx
function clip() { xclip -se c ;}
# alias cat='bat'
#alias find='fd'
alias preview="fzf --preview 'bat --color \"always\" {}'"
# add support for ctrl+o to open selected file in VS Code
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"


# git
alias g='git'

# replaced with g shortcuts in git_aliases.sh
# shortcut 'ga' 'git add -p $*'
# shortcut 'gc' 'git commit $*'
# shortcut 'gs' 'git status'
# function git_branchname() { git symbolic-ref --short HEAD; }
# function git_push() {
#   if [[ `git_branchname` == "master" ]] || [[ `git_branchname` == "main" ]]
#   then
#     echo "cannot push to master or main";
#     return -1;
#   else
#     git push $*;
#   fi
# }
# shortcut 'gps' 'git_push $*'
# shortcut 'gpsu' 'gps --set-upstream origin $(git rev-parse --abbrev-ref HEAD)'
# shortcut 'gpsforce' 'gps --force-with-lease'
# shortcut 'gco' 'git checkout $*'
# shortcut 'gcop' 'gco -p $*'
# shortcut 'gcob' 'gco -b $*'
# shortcut 'gss' 'git stash'
# shortcut 'gsp' 'git stash pop'
# shortcut 'gsk' 'git stash --keep-index'
# shortcut 'gpl' 'git pull --autostash --rebase'
# shortcut 'gppl' 'gco target && gpl'
# shortcut 'gd' 'git diff --color-words $*'
# shortcut 'gdc' 'git diff --color-words --cached $*'
# shortcut 'gdn' 'gd --name-only $*'
# shortcut 'gl' 'git log --oneline --graph --decorate --all'
# shortcut 'glfn' 'git log --graph --decorate --all --name-status'
# shortcut 'gcp' 'git cherry-pick $*'
# shortcut 'gmt' 'git mergetool'
# shortcut 'gmm' 'gss && gco main && gpl && gco - && git merge main'
# shortcut 'grebase' 'gco $1 && gpl && gco - && git rebase --autostash $*'
# shortcut 'grbc' 'git rebase --continue'
# shortcut 'grbm' 'grebase main'
# shortcut 'gpristine' 'git reset --hard && git clean -dfx'
# shortcut 'gui' 'git update-index --assume-unchanged $*'
# shortcut 'gcommits' 'git shortlog -sn'
# glines() {
#   git log --author="$1" --since="$2" --pretty=tformat: --numstat \
# | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc }' - ;
# }
# shortcut 'gca' 'git commit --amend $*'
# shortcut 'gcna' 'git commit -n --amend $*'
# # shortcut 'gcm' 'git commit -m "$*"'
# function gcm() {
#   git commit -m "$*"
# }
# shortcut 'gcnm' 'git commit -n -m "$*"'
# shortcut 'gclean' 'git clean -i'
# shortcut 'gresetorigin' 'git reset --hard origin/`git branch --show-current`'
# shortcut 'git_recent_files' 'git whatchanged --diff-filter=A $*'

# ruby
shortcut 'be' 'bundle exec $*'
shortcut 'ber' 'be rake $*'
shortcut 'beg' 'be guard $*'
shortcut 'binc' 'bundle install --no-deployment && bundle clean --force'
shortcut 'rbv' 'rm -rf .bundle vendor'
shortcut 'tld' 'tail -f log/development.log'
function rdc() { ber deploy:clean; }
function rd() { ber deploy; }
function rde() { ber db:seed; }
function rds() { ber deploy:status; }

# system
function k9() { kill -9 $*; }
function kl() { k9 %$1; }
function kill_all() { ps -A | grep $* | cut -d' ' -f1 | xargs -I {} k9 {}; }
function findgrep() { find . | xargs grep -s $*; }
function untilfail() {
  count=0
  while (time $*); do (( count++ )); done
  echo "failed on attempt $count"
}
function untilsuccess() {
  count=0
  until $*
  do
    ((count++))
    echo "Try again $count"
  done
  echo "success on attempt $count"
}

function forEachIn() {
  for ITEM in `ls $1`
  do
    echo "for $1/$ITEM $2"
    pushd $1/$ITEM
    eval $2 || return $?
    popd
  done
}

function forprojects() {
  for PROJ in ${PROJECT_NAMES[@]}
  do
    # echo "for $PROJECTS/${PROJ} $*"
    pushd $PROJECTS/${PROJ}
    eval $* || return $?
    popd
  done
}

function insert_start() { echo $1 | cat - $2 > temp_file.insert_start && mv temp_file.insert_start $2; }

# Add an "alert" alias for long running commands.  Use like so:
# sleep 10; alert
# alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


# project specific aliases
export PROJECTS=~/Code
export PROJECT_NAMES=()


#export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
#export JAVA_9_HOME=$(/usr/libexec/java_home -v9)
#export JAVA_10_HOME=$(/usr/libexec/java_home -v10)
#export JAVA_11_HOME=$(/usr/libexec/java_home -v11)
#export JAVA_12_HOME=$(/usr/libexec/java_home -v12)
#export JAVA_17_HOME=$(/usr/libexec/java_home -v17)

#alias java8='export JAVA_HOME=$JAVA_8_HOME'
#alias java9='export JAVA_HOME=$JAVA_9_HOME'
#alias java10='export JAVA_HOME=$JAVA_10_HOME'
#alias java11='export JAVA_HOME=$JAVA_11_HOME'
#alias java12='export JAVA_HOME=$JAVA_12_HOME'
#alias java17='export JAVA_HOME=$JAVA_17_HOME'

# default to Java 12
#java17

# rta() {
#   forprojects gs &&
#   forprojects binc &&
#
#   pushd $PROJECTS/platform && ber deploy && popd &&
#
#   forprojects ber test:all
# }

#github
function ssh_agent_github() { ssh-add; ssh -T git@github.com; }


shortcut 'ct' 'cut -d " " -f$*'

# zendesk
shortcut 'z' 'zdi $*'
shortcut 'zs' 'z world status'
shortcut 'zvstart' 'z vm start'
# shortcut 'zrestart' 'z vm start; z vm restart && z apps stop; z services stop; z services start; z apps start'
shortcut 'zrestart' 'zdi vm restart && zdi world restart'
shortcut 'zwr' 'zdi world restart'
shortcut 'zbaserestart' 'zdi consul restart && zdi dnsmasq restart && zdi nginx restart'
shortcut 'zfresh' 'zclean && zbuild'
shortcut 'clean_unused_images' 'docker system prune --volumes'

# shortcut 'zfresh' 'znuke && z cleanup && z mysql reset && z bootstrap && z outbound_server seed && z update && zrestart && zs'
shortcut 'zmigrate' 'z migrations pull && z migrations migrate'
shortcut 'migration_setup' 'pushd ../zendesk_database_migrations/ && git pull && zdi migrations pull && zdi migrations -d seed && popd'



shortcut 'cdz' 'cd ~/Code/zendesk'
shortcut 'cdso' 'cd ~/Code/zendesk/sandbox_orchestrator'
shortcut 'cdcch' 'cd ~/Code/zendesk/customer-config-history'
shortcut 'prtest' 'pipenv run py.test -vv $* --cov-report xml:cov.xml --cov'
shortcut 'psd' 'pipenv sync --dev && pipenv clean'
shortcut 'pyclean' 'find . -name "*.pyc" -delete && rm -rf ~/Library/Caches/black/* && pipenv --rm && psd'
shortcut 'pcsd' 'pyclean && psd'
shortcut 'pyblackclean' 'rm -rf ~/Library/Caches/black/*'

# Java shortcuts
shortcut 'gr' './gradlew $*'
shortcut 'grc' './gradlew check -i -t'
shortcut 'grr' './gradlew run -t'

export PIPENV_VERBOSITY=-1
export PYTHONDONTWRITEBYTECODE=1

#export SKIP=isort

function dfm {
  unset DOCKER_FOR_MAC_ENABLED
  unset DOCKER_HOST_IP
  export DOCKER_FOR_MAC_ENABLED=true
  export DOCKER_HOST_PORT=2375
  export DOCKER_HOST=unix:///var/run/docker.sock
}
function dfz {
  export DOCKER_FOR_MAC_ENABLED=false
  export DOCKER_HOST_IP=192.168.42.45
  export DOCKER_HOST_PORT=2375
  export DOCKER_HOST=tcp://192.168.42.45:2375
}
dfm
